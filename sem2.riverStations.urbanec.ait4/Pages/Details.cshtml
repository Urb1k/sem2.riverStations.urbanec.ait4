@page
@model sem2.riverStations.urbanec.ait4.Pages.Shared.DetailsModel

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<div>
    <h4>Stations</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Stations.River)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Stations.River)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Stations.FloodWarningValue)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Stations.FloodWarningValue)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Stations.DroughtWarningValue)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Stations.DroughtWarningValue)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Stations.TimeToleranceInMin)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Stations.TimeToleranceInMin)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Stations.CreatedByUser)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Stations.CreatedByUser)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Stations.CreatedOn)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Stations.CreatedOn)
        </dd>
    </dl>
</div>
<div>
    <a asp-page="./Edit" asp-route-id="@Model.Stations.ID">Edit</a> |
    <a asp-page="./Stations">Back to List</a>
</div>
<div>
    <h4>History Values</h4>
    <hr />
    <table class="table table-striped">
        <thead>
            <tr>
                <th>River</th>
                <th>Timestamp</th>
                <th>Value</th>
            </tr>
        </thead>
        <tbody id="historyValuesBody">
            @foreach (var item in Model.HistoryValues)
            {
                var riverName = item.Station?.River ?? "Unknown"; // Default to "Unknown" if River is null
                var floodWarningValue = item.Station?.FloodWarningValue ?? 0;
                var droughtWarningValue = item.Station?.DroughtWarningValue ?? 0;
                var value = item.Value;

                // Determine the color based on the value
                string circleColor = "";
                string textColor = "";
                if (value > floodWarningValue)
                {
                    circleColor = "red";
                    textColor = "black";
                }
                else if (value < droughtWarningValue)
                {
                    circleColor = "orange";
                    textColor = "black";
                }
                else
                {
                    circleColor = "darkgreen";
                    textColor = "black"; // Adjusted text color for better visibility
                }
            <tr>
                <td>@riverName</td>
                <td>@item.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</td>
                <td style="color: @textColor;">
                    <div style="display: flex; align-items: center;">
                        <div style="width: 20px; height: 20px; border-radius: 50%; background-color: @circleColor; margin-right: 10px;"></div>
                        @value
                    </div>
                </td>
            </tr>
            }
        </tbody>
    </table>
</div>


<script>
    var startIndex = @Model.HistoryValues.Count;
    var batchSize = 10;

    function loadMore() {
        var url = `/Shared/Details?id=@Model.Stations.ID&startIndex=${startIndex}&batchSize=${batchSize}`;
        fetch(url)
            .then(response => response.text())
            .then(data => {
                var parser = new DOMParser();
                var doc = parser.parseFromString(data, 'text/html');
                var newRows = doc.getElementById('historyValuesBody').innerHTML;
                document.getElementById('historyValuesBody').innerHTML += newRows;
                if (doc.getElementById('loadMoreBtn') == null) {
                    document.getElementById('loadMoreBtn').setAttribute('disabled', 'disabled');
                }
                startIndex += batchSize;
            })
            .catch(error => console.error('Error:', error));
    }

    function refresh() {
        var url = `/Shared/Details?id=@Model.Stations.ID&startIndex=0&batchSize=${batchSize}`;
        fetch(url)
            .then(response => response.text())
            .then(data => {
                var parser = new DOMParser();
                var doc = parser.parseFromString(data, 'text/html');
                var newRows = doc.getElementById('historyValuesBody').innerHTML;
                document.getElementById('historyValuesBody').innerHTML = newRows;
                startIndex = batchSize;
                document.getElementById('loadMoreBtn').removeAttribute('disabled');
            })
            .catch(error => console.error('Error:', error));


    }
</script>
